This file contains walk-throughs for a few examples illustrating
how to use the enumeration code. Please take a look at the README file
before stepping through this file. The README is not long.

If you have suggestions about how to make it easier to learn how to
use the enumeration code, please call or email me:

Gus Hart
801-422-7444
gus.hart@byu.edu



**********
Ex. 1: Generate all fcc-based, binary superstructures from 1
atoms/cell to 8 atoms/cell

In the input directory (`enumlib/support/input/`), there is a file for this case called
"struct_enum.in.fcc".

You can run this example by typing (in the input directory):
../../src/enum.x struct_enum.in.fcc

Or, copy the struct_enum.in.fcc file to "struct_enum.in" and simply:
../../src/enum.x

(See sample output below)

This will generate an output file called "struct_enum.out", as well as
some supporting files that you needn't pay any attention to. We'll
discuss the output below, but first here's a general description of
the input file, some details specific to this example.

*Line 1: Just a title, echoed in the output, but not used otherwise
*Line 2: the word "bulk" triggers a 3-D enumeration, "surf" enumerates
2-D structures. (Example 2 shows input for a 2-D case.)
*Lines 3-5: The parent unit cell is defined by the vectors given
here. The vectors should be listed by rows (not by columns)
*Line 6: An integer specifying binary (2), ternary (3), quaternary
(4), etc. This number is the same as the total number of distinct
labels that are used in Lines 8 and beyond.
*Line 7: Nd, an integer. Nd, number of d-points, is the number of
lattice points in the parent lattice. 1 for monoatomic cases (like fcc,
bcc, etc.), 2 for hcp, e.g., etc.
*Lines 8--8+Nd-1: The vectors describing each of the parent lattice
points, given in Cartesian coordinates. After each of the vectors is a
list "0/1/..." that specifies which types of atoms can be on each
site. Not every atom type need appear on every lattice site in the
parent cell.
*Line 9+Nd-1: The range of supercell sizes to sweep over (size 1 to
size 8 in this example). For a single size, say size 12, give the same
number twice, e.g., "12 12". Size is relative to the parent cell. 2
means twice as big as the parent cell, 3 means 3x bigger, etc. (So
this number isn't an actual volume but a factor of the parent.)
*Line 10+Nd-1: a small real number. This is an epsilon used when
comparing two real numbers to avoid finite precision errors. Should be
much smaller than the absolute value of the coordinates in your
lattice vectors. Almost anything works as long as it's not too small
(1e-14).
*Line 11+Nd-1: "full" or "part" When "full" is specified, every
symmetrically-distinct configuration is generated (this is what most
people want). When "part" is specified, structures that are identical
under atom exchange (A<-->B) are only listed once. For example, in
enumerating fcc superstructures of size 4, the L1_2 structure would
appear twice, once as A_3B and once again as AB_3 with the "full"
setting. But with the "part" setting, L1_2 would only be listed
once. The "full" setting lists all structures that are *physically*
distinct (different energies), whereas the "part" setting lists only
structures that *crystallographically* distinct. (It doesn't list the
"concentration mirror image" structures.)

When you run the case for this input file, you will see output like
the following:

~/codes/enumlib/support/input> ../../src/enum.x struct_enum.in.fcc
Concentration ranges are not specified
---------------------------------------------------------------------------------------------
Calculating derivative structures for index n= 1 to  8
Volume       CPU        #HNFs  #SNFs    #reduced    % dups      volTot      RunTot
   1         0.0054        1     1         1        0.0000           2           2
   2         0.0056        7     1         2        0.7143           2           4
   3         0.0094       13     1         3        0.7692           6          10
   4         0.0409       35     2         7        0.8000          19          29
   5         0.0306       31     1         5        0.8387          28          57
   6         0.1753       91     1        10        0.8901          80         137
   7         0.0730       57     1         7        0.8772         104         241
   8         0.4779      155     3        20        0.8710         390         631
---------------------------------------------------------------------------------------------

There are a total of 631 binary derivative structures of an fcc parent
cell. (See last column.) The #reduced column shows the number of
unique supercells generated from the list of HNFs. %dups shows what
fraction of the HNFs for each size were symmetrically
equivalent. volTot shows the number of unique configurations for each
size (number of atoms/cell, i.e., the Volume [column 1]).

The 631 structures that were generated are stored in a file called
"struct_enum.out". It will probably wrap around lines in your
editor. Make your window really wide to view it. (Make your current
window wider to view this EXAMPLES file.)

```
bulk
 0.50000000      0.50000000       0.0000000        # a1 parent lattice vector
 0.50000000       0.0000000      0.50000000        # a2 parent lattice vector
  0.0000000      0.50000000      0.50000000        # a3 parent lattice vector
    1 # Number of points in the multilattice
  0.0000000       0.0000000       0.0000000        # d01 d-vector, labels: 0/1
 2-nary case
   1   8 # Starting and ending cell sizes for search
 0.10000000E-06 # Epsilon (finite precision parameter)
Concentration check:
    F
full list of labelings (including incomplete labelings) is used
Equivalency list: 1
start   #tot      HNF     #size idx    pg    SNF             HNF                 Left transform                 labeling
          1       1           1   1    48   1  1  1    1  0  1  0  0  1      1    0    0    0    1    0    0    0    1   0
          2       1           2   1    48   1  1  1    1  0  1  0  0  1      1    0    0    0    1    0    0    0    1   1
          3       2           1   2    12   1  1  2    1  0  1  0  0  2      1    0    0    0    1    0    0    0    1   01
          4       3           2   2    16   1  1  2    1  0  1  0  1  2      1    0    0    0    1    0    0   -1    1   01
          5       4           1   3    12   1  1  3    1  0  1  0  0  3      1    0    0    0    1    0    0    0    1   001
          6       5           2   3     8   1  1  3    1  0  1  0  1  3      1    0    0    0    1    0    0   -1    1   001
          7       6           3   3    16   1  1  3    1  0  1  0  2  3      1    0    0    0    1    0    0   -2    1   001
          8       4           4   3    12   1  1  3    1  0  1  0  0  3      1    0    0    0    1    0    0    0    1   011
          9       5           5   3     8   1  1  3    1  0  1  0  1  3      1    0    0    0    1    0    0   -1    1   011
         10       6           6   3    16   1  1  3    1  0  1  0  2  3      1    0    0    0    1    0    0   -2    1   011
         11       7           1   4    12   1  1  4    1  0  1  0  0  4      1    0    0    0    1    0    0    0    1   0001
         12       8           2   4     8   1  1  4    1  0  1  0  1  4      1    0    0    0    1    0    0   -1    1   0001
....
        625      55         384   8    48   2  2  2    2  0  2  0  0  2      1    0    0    0    1    0    0    0    1   00000111
        626      55         385   8    48   2  2  2    2  0  2  0  0  2      1    0    0    0    1    0    0    0    1   00010111
        627      55         386   8    48   2  2  2    2  0  2  0  0  2      1    0    0    0    1    0    0    0    1   00011001
        628      55         387   8    48   2  2  2    2  0  2  0  0  2      1    0    0    0    1    0    0    0    1   00011011
        629      55         388   8    48   2  2  2    2  0  2  0  0  2      1    0    0    0    1    0    0    0    1   00011111
        630      55         389   8    48   2  2  2    2  0  2  0  0  2      1    0    0    0    1    0    0    0    1   00111101
        631      55         390   8    48   2  2  2    2  0  2  0  0  2      1    0    0    0    1    0    0    0    1   01111111
```

The header of this file, echos the input from your struct_enum.in
file. This is followed by the main body which lists each structure on
a single line.

Here is a description of that output:

Column 1: The number in this column is just the ordinal number of the
structure. Use this number when generating POSCARs from this output
(explained later below).

Column 2: This number is essentially the cell number. It just counts
over the HNF matrices (see first enumeration paper, listed in README)
used to generate the super cells. (Most users won't care about this
number.)

Column 3: Same as column 2 but this counter resets each time the
volume of the cell is increased. (Most users won't care about this
number.)

Column 4: Size of the unit cell for this structure. 1 is the parent
cell, 2 is doubled, 3 is tripled, and so on.

Column 5: The number of operators in the point group symmetry of the
supercell. This is sometimes useful to identify structures in the
list. For example, in this output, one of the two-atom structures as
16 operations (tetragonal), the other 12. From this we guess that the
first is L1_0 (CuAu), and the other is L1_1 (CuPt).

Columns 6-8: This is the Smith Normal Form of the group (or lattice)
associated with this cell. See the first enumeration paper if you are
curious about this. (Most users won't care about these numbers.)

Column 9-14: These 6 numbers are the elements of the lower-triangular
matrix that makes up the HNF describing the supercell. (Most users won't care about this
matrix.)

Column 15-23: These 9 numbers are the elements of a 3x3 matrix that is
used to transform the HNF into SNF form. This matrix is needed when
transforming elements of the group into sites in the unit cell. This
matrix is used by program that generates POSCARS from the data in this
file. But a typical user will not need to look at this matrix.

Column 24: This string of 0s, 1s, etc. represents the types atoms
inside the supercell.


Now that you have enumerated fcc cells up to a volume 8x that of the
parent cell lets see how to generate a POSCAR for one of the
structures in the "struct_enum.out" file.

Now, assuming your are still in the input directory, type

makeStr.py 165

to make structure number 165 into a POSCAR from the "struct_enum.out"
file. You can replace the "struct_enum.out" by another file of a
different name as long as the format is the same as a standard
struct_enum.out file. You can also replace "165" by "165 175" if you
want all 11 structures between those limits.

**********************************************************************
Ex 2: Enumerate all *ternary* structures on a square lattice (2-D) and
then make a figure that shows them.

For this case, use the sample input file called
"struct_enum.in.square"

Let's note a few differences between this file and the input file for
Ex. 1:

Line 2: We have used "surf" instead of "bulk"

Lines 3-5: the lower, right 2x2 square of numbers (inside the 3x3
square) are the lattice vectors for the surface parent cell. The
numbers in row 1 and column 1 must be 1, 0, 0.

Line 6: We'll do a ternary case (3 types of atoms, 0, 1, 2) instead of
a binary like last time.

Line 8: Note that after the the d-vector, we list "0/1/2" to indicate
that all three types of atoms can be present on the first (and only)
lattice point in the parent cell.

Line 9: We'll go up to cells of size 10x the parent cell.

Line 11: We'll to a "partial" listing this time, only enumerating
*crytalographically* distinct structures

Here's the output when we run (../../src/enum.x
struct_enum.in.square). Note again that you'll want to widen your text
editor window to make this readable.

**********************************************************************
~/codes/enumlib/support/input> ../../src/enum.x struct_enum.in.square
Concentration ranges are not specified
---------------------------------------------------------------------------------------------
Calculating derivative structures for index n= 1 to 16
Volume       CPU        #HNFs  #SNFs    #reduced    % dups      volTot      RunTot
   1         0.0041        1     1         1        0.0000           0           0
   2         0.0061        3     1         2        0.3333           0           0
   3         0.0049        4     1         2        0.5000           2           2
   4         0.0064        7     2         4        0.4286           8          10
   5         0.0054        6     1         3        0.5000          13          23
   6         0.0079       12     1         5        0.5833          65          88
   7         0.0091        8     1         3        0.6250          93         181
   8         0.0751       15     2         7        0.5333         495         676
   9         0.0982       13     2         5        0.6154         873        1549
  10         0.2728       18     1         7        0.6111        3469        5018
**********************************************************************

Note that the "part" setting on line 11 also insists that each label
(0, 1, 2) must appear in each structure (so it leaves out pure binary
structures in this ternary case), so there are no structures of volume
1 or 2. Try running again with the "full" setting to see that
configurations will be found for volumes 1 and 2 in that case.

If you want to see what some of these structures look like (much
easier in this 2D case than in 3D cases), we can make a picture of the
first few hundred structures stored in the "struct_enum.out" file. Do
this, (assuming your are still in the "input" directory):

cd ..
make 2Dplot.x
cd -
../2Dplot.x struct_enum.out
ps2pdf splot.ps

The picture is stored in a pdf file called "splot.pdf". The repository
includes a copy of this picture as "square_ternary.pdf"

**********************************************************************
Ex. 3: Enumerating when the parent lattice has more than one lattice
point (multilattice enumeration).

Some parent cells, that of hexagonal close-packed, for example, have
more than one lattice point. These "lattices" are not Bravais (simple
lattices) but are called multilattices. From the algorithmic point of
view, this requires a more general approach (see the 2009 enumeration
paper in the README), but from the user's perspective, nothing changes
except that the extra lattice points must be added in the input file.

An example input file for a 2-D multilattice case is given in
"struct_enum.in.triangle". You can use 2Dplot.x to make a picture of
this one as well, though adjustments in the 2Dplot settings are
necessary to make it look nice.

**********************************************************************
~/codes/enumlib/support/input> ../../src/enum.x *triangle
Concentration ranges are not specified
---------------------------------------------------------------------------------------------
Calculating derivative structures for index n= 1 to  8
Volume       CPU        #HNFs  #SNFs    #reduced    % dups      volTot      RunTot
   1         0.0030        1     1         1        0.0000           1           1
   2         0.0028        3     1         1        0.6667           3           4
   3         0.0046        4     1         2        0.5000          12          16
   4         0.0086        7     2         3        0.5714          48          64
   5         0.0094        6     1         2        0.6667         108         172
   6         0.0315       12     1         3        0.7500         518         690
   7         0.1272        8     1         3        0.6250        1236        1926
   8         0.8770       15     2         5        0.6667        6983        8909
---------------------------------------------------------------------------------------------
**********************************************************************
Ex. 4: Enumerating for a narrow range of concentrations

Enumerating with limited concentration range requires a different
approach to indexing the hash table than that used in the original
algorithm. The third paper in the README explains how this is done,
but the only thing the casual user needs to know is how to change the
input to limit the enumeration to a fixed range of compositions.

We'll do this example, recycling the case of Example 1, just
restricting the composition to *at least* 50% of the A atom (type 0 in
the input file).

Then will change the example to only enumerate structures that have
exactly 1:1 stoichiometry.

The input file for the first part of the example is called
"struct_enum.in.fcc.fixed_concentrations". Note the extra thre lines
added to the end of the original to input file:

# Concentration restrictions
1 2 2  # Or you could use 50 100 100
0 2 2  # Or you could use 0 100 100

The first line is a comment. The second line defines the range of
concentrations for the A atoms (type 0). Since the range of
concentrations we want is 1/2--2/2 (50%--100%), we enter 3
numbers. The first two are the numerators of the desired fractions;
the third is the denominator for each. The third line is the range for
the B atoms (type 1). Since we don't want any restrictions on the B
atoms, the fractions range from 0% to 100%.

When doing a concentration-restricted case, you *must* enter a
concentration range for *every* type, even those that are
unrestricted. If you don't, the code will do a normal enumeration,
with a full concentration range for every atomic type.

Here's the sample output for the first part of this example:
**********************************************************************
~/codes/enumlib/support/input> ../../src/enum.x *ions
---------------------------------------------------------------------------------------------
Calculating derivative structures for index n= 1 to  8
Including only structures of which the concentration of each atom is in the range:
Type: 1: 1/2--2/2
Type: 2: 0/2--2/2
Volume       CPU        #HNFs  #SNFs    #reduced    % dups      volTot      RunTot
   1         0.0045        1     1         1        0.0000           1           1
   2         0.0059        7     1         2        0.7143           2           3
   3         0.0102       13     1         3        0.7692           3           6
   4         0.0427       35     2         7        0.8000          12          18
   5         0.0311       31     1         5        0.8387          14          32
   6         0.1642       91     1        10        0.8901          50          82
   7         0.0744       57     1         7        0.8772          52         134
   8         0.5737      155     3        20        0.8710         242         376
---------------------------------------------------------------------------------------------
**********************************************************************

Run enum.x using this input file and you will find that, unlike
example 1, there are 376 structures, rather than 631. Also, note that
the screen output (and the header in the struct_enum.out file) include
additional information about the concentrations.

Now, let's change the concentration ranges again. This time
restricting ourselves only to structures with a precisely 1:1
stoichiometry. The input file for this part of the example is called
"struct_enum.in.fcc.1_1". If you run this case, you will find only 121
structures. Note in the output below that all of the supercells of
"odd" sizes have been skipped because it is impossible for them to
meet the concentration restrictions.

**********************************************************************
~/codes/enumlib/support/input> ../../src/enum.x *1_1
---------------------------------------------------------------------------------------------
Calculating derivative structures for index n= 1 to  8
Including only structures of which the concentration of each atom is in the range:
Type: 1: 1/2--1/2
Type: 2: 1/2--1/2
Volume       CPU        #HNFs  #SNFs    #reduced    % dups      volTot      RunTot
   2         0.0058        7     1         2        0.7143           2           2
   4         0.0418       35     2         7        0.8000           5           7
   6         0.1644       91     1        10        0.8901          20          27
   8         0.4863      155     3        20        0.8710          94         121
---------------------------------------------------------------------------------------------
**********************************************************************



**********************************************************************
Ex. 5: Enumerating in a fixed cell shape, with restricted
concentrations.

In this example, we want to enumerate inside a large supercell, with a
fixed shape, with a fixed concentration. We'll use a 2D example that
is easy to visualize. Suppose we have a square lattice and the
supercell we are interested contains 16 sites. Suppose further that
there are two lattice points in the
parent cell, one at the corners of the square and one at the
center. The corner sites can be occupied by either A or B atoms, and
the center sites by C or D atoms.

The supercell has sides of length 2*sqrt(2) and is a large square
whose sides make an angle of 45 degrees with respect to the Cartesian
axes. You could make a primitive unit cell, with 8*2=16 sites, and
enumerate over that. This works but is tedious to set up. An easier
approach is to define the parent cell as a simple square cell, with
two lattice points, and then tell the enumeration code to only work
inside the square "root2xroot2" supercell.

Finally, we'll restrict the enumeration to a concentration of 1/16 for
the A atoms and 1/16 for the C atoms.

The definition of the square lattice with two lattice points is given
in the input file "struct_enum.in.ex5". The supercell is defined in
another file that must be named "fixed_cells.in". In this file, the
supercell vectors are defined in Cartesian coordinates (not as
multiples of the parent cell vectors).

Copy "fixed_cells.in.8x" to "fixed_cells.in" and then run
"../../src/enum.x struct_enum.in.ex5".

**********************************************************************
~/codes/enumlib/support/input> ../../src/enum.x struct_enum.in.ex5
---------------------------------------------------------------------------------------------
Generating permutations for fixed cells. index n= 8 to  8
---------------------------------------------------------------------------------------------
Calculating derivative structures for index n= 8 to  8
Including only structures of which the concentration of each atom is in the range:
Type: 1: 1/16--1/16
Type: 2: 7/16--7/16
Type: 3: 1/16--1/16
Type: 4: 7/16--7/16
Volume       CPU        #HNFs  #SNFs    #reduced    % dups      volTot      RunTot
   8         0.0574        1     1         1        0.0000           4           4
---------------------------------------------------------------------------------------------
**********************************************************************

**********************************************************************
Ex. 6: Including displacement directions in the enumeration of a
concentration restricted cell.

In this example, we will enumerate a ternary system within a small
cell that has concentration restrictions. Additionally, we will want
to allow each of the third atomic species to be displaced off the
lattice and find the unique displacements. The parent cell will be a
simple cube with a single lattice site. We will be enumerating
supercells of up to three atoms.

The atoms will be restricted so that atoms A and B can each have a
concentration range of 0/5 to 2/5 and atom C can have a concentration
range of 0/5 to 4/5.

The definition of the system is contained in
`arrow_enum_struct_enum.in' and the details of the number of arrows to
be included for each atomic species is contained in 'arrows.in'.

To generate the enumerated system run:
`../../src/enum.x arrow_enum_struct_enum.in'.

**********************************************************************
~/codes/enumlib/support/input> ../../src/enum.x arrow_enum_struct_enum.in
---------------------------------------------------------------------------------------------
Calculating derivative structures for index n= 1 to  3
Including only structures of which the concentration of each atom is in the range:
Type: 1: 0/5--2/5
Type: 2: 0/5--2/5
Type: 3: 0/5--4/5
Volume       CPU        #HNFs  #SNFs    #reduced    % dups      volTot      RunTot
   3         0.0048       13     1         3        0.7692          56          56
---------------------------------------------------------------------------------------------
**********************************************************************

**********************************************************************
Ex. 7: Multinomial overflow.

In this example a common issue with the code is demonstrated. The
issue is caused by the size restrictions on an integer within enumlib,
the largest allowed integer is 1E18. If the user attempts to enumerate
a system whose number of possible arrangements exceeds 1E18 it can
cause the code to fail. An exmple system con be found in
'overflow_struct_enum.in'.

**********************************************************************
~/codes/enumlib/support/input> ../../src/enum.x overflow_struct_enum.in
---------------------------------------------------------------------------------------------
Calculating derivative structures for index n= 1 to  1
Including only structures of which the concentration of each atom is in the range:
Type: 1: 1/10--1/10
Type: 2: 1/5--1/5
Type: 3: 1/10--1/10
Type: 4: 1/2--1/2
Type: 5: 1/10--1/10
Volume       CPU        #HNFs  #SNFs    #reduced    % dups      volTot      RunTot
At line 416 of file labeling_related.f90
Fortran runtime error: Index '1' of dimension 1 of array 'lab' above upper bound of -7061685723885593328
---------------------------------------------------------------------------------------------
**********************************************************************
